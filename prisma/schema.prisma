generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           String          @default("STUDENT")
  studentId      String?         @unique
  department     String?
  semester       String?
  phone          String?
  bio            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  budgetRequests BudgetRequest[]
  clubsLed       Club[]          @relation("ClubLeader")
  eventRsvps     EventRsvp[]
  memberships    Membership[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  logo           String?
  email          String?         @unique
  website        String?
  phone          String?
  department     String?
  status         String          @default("PENDING")
  foundedYear    Int?
  vision         String?
  mission        String?
  activities     String
  leaderId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgetRequests BudgetRequest[]
  leader         User            @relation("ClubLeader", fields: [leaderId], references: [id])
  events         Event[]
  memberships    Membership[]

  @@map("clubs")
}

model Membership {
  id        String    @id @default(cuid())
  userId    String
  clubId    String
  status    String    @default("PENDING")
  role      String?   @default("Member")
  joinedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  club      Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
  @@map("memberships")
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String?
  venue        String
  startDate    DateTime
  endDate      DateTime
  capacity     Int?
  isPublic     Boolean     @default(true)
  status       String      @default("PENDING")
  requirements String?
  clubId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rsvps        EventRsvp[]
  club         Club        @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("events")
}

model EventRsvp {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    String   @default("ATTENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_rsvps")
}

model BudgetRequest {
  id          String    @id @default(cuid())
  title       String
  description String?
  amount      Float
  purpose     String
  status      String    @default("PENDING")
  clubId      String
  requestedBy String
  reviewedBy  String?
  reviewNotes String?
  requestedAt DateTime  @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  requester   User      @relation(fields: [requestedBy], references: [id])
  club        Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("budget_requests")
}

model Notification {
  id         String   @id @default(cuid())
  title      String
  message    String
  type       String
  recipients String
  sentAt     DateTime @default(now())
  createdAt  DateTime @default(now())

  @@map("notifications")
}
